#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <time.h>
#include <sys/time.h>
#include <errno.h>
#include <map>
#include <iostream>
#include <ps_client/client.h>

template <typename T> 
Queue<T>::Queue()
{
  count = 0;
  front = end = nullptr;
}

template <typename T>
Queue<T>::~Queue()
{
  Node * temp;
  while(front != (void *) 0)
    {
      temp = front;
      front = front->next;
      delete temp;
    }
}

template <typename T>
bool Queue<T>::isempty() const
{
  return count == 0;
}



template <typename T>
bool Queue<T>::push(const T &data)  
{
  if(isfull())
    return false;

  Node * newItem = new Node;
  newItem->item = data;
  newItem->next = (void *) 0;
  count++;
  if (front == (void *) 0)
    front = newItem;
  else
    end->next = newItem;
  end = newItem;

  return true;
}

template <typename T>
bool Queue<T>::pop(T &data)
{
  if(front == (void *) 0)
    return false;

  data = front->item;
  count--;
  Node * temp = front; 
  front = front->next; 
  delete temp;

  if (count == 0)
    end = (void *)0;

  return true;

}
